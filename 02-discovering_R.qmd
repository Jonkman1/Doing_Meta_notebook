# R ontdekken
## Theorie

`R` is uitgegroeid tot een van de krachtigste en meest gebruikte statistische programmeertalen ter wereld. Of je nu in de academische wereld werkt of in een bedrijf, de dingen die je in R kunt doen lijken vaak een superkracht voor anderen. Maar het is een superkracht die iedereen kan leren, mits je er wat tijd en moeite in stot. 

Het boek laat zien hoe je `R` en `RStudio` installeert (de laatste geeft ons een gebruikersinterface die het makkelijker maakt om met onze gegevens, pakketten en uitvoer om te gaan). `R` is geen computerprogramma met een grafische gebruikersinterface en voorgedefinieerde functionaliteit. `RStudio` laat jou makkelijker met `R` werken. `R` is de moter en `RStduio` is meer het dashboard. Het boek laat zien hoe het met elkaar werkt.

`R` is een volledige programmeertaal waaraan mensen over de hele wereld met vrij beschikbare uitbreidingen, zogenaamde specifieke pakketten, kunnen bijdragen. Belangrijke specifieke pakketten voor het werken met dit boek en het doen van meta-analyse met `R` zijn `meta` (zie bv [hier](https://www.r-bloggers.com/2021/08/meta-analysis-in-r/)), `metafor`(zie bv [hier](https://www.r-bloggers.com/2019/12/meta-analysis-2/)), `dmetar` (zie [hier](https://dmetar.protectlab.org/articles/dmetar)) en (voor data bewerking) `tidyverse` (zie [hier](https://www.tidyverse.org/learn/). 

Nadat je `R` en `RStudio` hebt geïnstalleerd op jouw computer, moet deze pakketten installeren op je computer. De fundamentele bouwstenen van R zijn functies, waarmee in dit hoofdstuk wordt gewerkt en waarmee je een goed idee krijgt hoe een en ander voor het uitvoeren van meta-analyses werkt. Veel van de functies kunnen worden geïmporteerd en uitgevoerd via pakketten die met internet zijn te installeren. Functies kunnen worden gebruikt om gegevens te importeren, te manipuleren, te transformeren en op te slaan met behulp van `R`. Er worden voorbeelden gegeven van basisfuncties die belangrijk zijn voor het uitvoeren van meta-analyses in R en in de hoofdstukken hierna worden uitgevoerd.

## Praktijk

Installeer eerst de pakketten die nodig zijn voor dit boek. Ik moest zelf een vorige versie van `meta` installeren om het pakket `dmetar` te installeren. Als je dit niet eerder hebt gedaan met je de hekjes (`#`) weghalen en de code uitvoeren. Dat installeren hoef je maar één keer te doen.

```{r}
#require(remotes)
#install_version("meta", version = "6.5.0", repos = "http://cran.us.r-project.org")

#install.packages("tidyverse")

#install.packages("metafor")

#install.packages("devtools")

#devtools::install_github("MathiasHarrer/dmetar")
```

Laad de pakketten die nodig zijn om de voorbeelden in dit boek uit te voeren.

```{r}
library(meta)
library(metafor)
library(dmetar)
library(tidyverse)
```

Haal ook de dataset`SuicidePrevention.xlx` die je [hier](https://www.protectlab.org/en/datasets/suicide-prevention/) vandaan kunt halen en open die set.

```{r}
library(openxlsx)
data <-read.xlsx("SuicidePrevention.xlsx")
```

Laten we naar die dataset kijken en zien welke variabelen er zijn. Er zijn tien kolommen (variabelen) en negen rijgen (individuele studies)

```{r}
glimpse(SuicidePrevention)
```

Je kunt de inhoud van een bepaalde kolommen alleen bekijken, bv deze:

```{r}
SuicidePrevention$n.e
```

En je kunt ook zien wat voor een soort variabele het is.

```{r}
class(SuicidePrevention$n.e)
```

Laten we het gemiddelde van deze variabele vaststellen.

```{r}
mean(SuicidePrevention$n.e)
```

Zorg ervoor dat de variabelen de goede klasse hebben, bijvoorbeeld numeriek. Laten we dit veranderen voor enkele variabelen.

```{r}
SuicidePrevention$mean.e <- as.numeric(SuicidePrevention$mean.e)
SuicidePrevention$sd.e <- as.numeric(SuicidePrevention$sd.e)
SuicidePrevention$n.c <- as.numeric(SuicidePrevention$n.c)
SuicidePrevention$mean.c <- as.numeric(SuicidePrevention$mean.c)
SuicidePrevention$sd.c <- as.numeric(SuicidePrevention$sd.c)
SuicidePrevention$n.c <- as.numeric(SuicidePrevention$n.c)
```

Twee variabelen moeten we veranderen in factoren om de analyse later correct te kunnen uitvoeren.

```{r}
SuicidePrevention$age_group <- as.factor(SuicidePrevention$age_group)
SuicidePrevention$control <- as.factor(SuicidePrevention$control)
```

In dit geval is de variabele `age_group` opgesplitst in de niveaus `gen` en `older`, zie hier:

```{r}
SuicidePrevention$age_group
```

Een logische variabele kan ook handig zijn, bijvoorbeeld voor de volgende variabele:

```{r}
SuicidePrevention$pubyear
```

Deze zetten we om in een logische variabele.

```{r}
as.logical(SuicidePrevention$pubyear >= 2010)
```

Soms is het goed om naar specifieke gegevens uit het dataframe te kijken. Onthoud: `data.frame[rijen, kolommen]`. Dus kijken naar rij 2 wordt:


```{r}
SuicidePrevention[2,]

```

Als je informatie van de eerste kolom én de tweede rij wilt zien, schrijf je:

```{r}
SuicidePrevention[2,1]

```

Gebruik de functie `c()` om delen van het dataframe te selecteren. Om rijen 2 en 3 en kolommen 4 en 6 te extraheren wordt

```{r}
SuicidePrevention[c(2,3),c(4,6)]

```

Rijen selecteer je op nummer, kolommen kun je ook op naam selecteren, zoals in dit voorbeeld.

```{r}
SuicidePrevention[, c("author", "control")]
```

Je kunt voor een gegevensverzameling ook de functie `filter` gebruiken, die werkt op basis van rijwaarden, bijvoorbeeld de rijwaarden van `n.e.` zijn kleiner of gelijk aan 50. Dan schrijf je:

```{r}
filter(SuicidePrevention, n.e <= 50)
```

Je kunt gegevens zelf gemakkelijk transformeren. Dus als je de studie van **De Vries et al.** wilt transformeren van 2019 naar 2018, kun je het schrijven als:

```{r}
SuicidePrevention[2, "pubyear"] <- 2018
SuicidePrevention[2, "pubyear"]
```

Als je een nieuwe kolom wilt toevoegen aan je dataframe (bijvoorbeeld het gemiddelde verschil), kun je dat als volgt doen:

```{r}
SuicidePrevention$md <- SuicidePrevention$mean.e - SuicidePrevention$mean.c
```

Zodra alles is getransformeerd, kunnen we het bewerkte bestand opslaan. Je kunt het opslaan als een .rda-bestand, zo dan:

```{r}
save(SuicidePrevention, file = "SuicidePrevention.rda")
```

of opslaan als een .csv-bestand, zo dan:

```{r}
write.csv(SuicidePrevention, file = "SuicidePrevention.csv")
```


::: {.callout-important}
Bewaar je transformatie syntax, zodat je weet wat je hebt gedaan van de originele gegevens naar de uiteindelijke gegevens.
:::
